import asyncio
import asyncpg

from decimal import Decimal

from config import DB_CONFIG


async def get_account_by_name(pool: asyncpg.Pool, user: str):
    async with pool.acquire() as aconn:
        result = await aconn.fetchrow(
            """
            SELECT name, balance FROM accounts WHERE name = $1
        """,
            user,
        )

        return result


async def create_accounts_table(pool: asyncpg.Pool):
    async with pool.acquire() as aconn:
        await aconn.execute(
            """
            CREATE TABLE IF NOT EXISTS accounts (
                id INT GENERATED BY DEFAULT AS IDENTITY,
                name VARCHAR(100) UNIQUE NOT NULL,
                balance DEC(15,2) NOT NULL CHECK(balance >= 0),
                PRIMARY KEY(id)
            )
            """
        )


async def insert_accounts_data(pool: asyncpg.Pool):
    async with pool.acquire() as aconn:
        await aconn.execute(
            """
            DELETE FROM accounts;
            INSERT INTO accounts(name,balance) VALUES
            ('Alice',10000),
            ('Bob', 10000),
            ('Robert', 999)
            """
        )


async def send_money_from_to(
    pool: asyncpg.Pool, sender: str, receiver: str, money: int
):
    sender_acc = await get_account_by_name(pool, sender)
    if sender_acc is None:
        # return SenderMissingError
        return False
    receiver_acc = await get_account_by_name(pool, receiver)
    if sender_acc is None:
        # return ReceiverMissingError
        return False

    if sender_acc[1] > money:
        async with pool.acquire() as aconn:
            async with aconn.transaction():
                await aconn.execute(
                    """
                    UPDATE accounts
                    SET balance = balance - $1 WHERE name = $2;
                    """,
                    Decimal(money),
                    sender
                )
                await aconn.execute(
                    """
                    UPDATE accounts
                    SET balance = balance + $1 WHERE name = $2;       
                    """,
                    Decimal(money),
                    receiver
                )
    else:
        # return SenderNotEnoughMoneyError
        print(f"User {sender} tries to send {money} but has only {sender_acc[1]}")
        return False


async def main():
    conn_string = f"postgresql://{DB_CONFIG['username']}:{DB_CONFIG['password']}@{DB_CONFIG['host']}/{DB_CONFIG['dbname']}"

    connection_pool = await asyncpg.create_pool(conn_string)

    await create_accounts_table(connection_pool)

    await insert_accounts_data(connection_pool)

    await send_money_from_to(connection_pool, "Alice", "Bob", 1000)


asyncio.run(main())
